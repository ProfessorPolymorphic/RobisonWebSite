{
  "hash": "e2a634a0e78d149e3a4fc14345b0e25f",
  "result": {
    "markdown": "---\ntitle: \"TUTORIAL 4\"\nsubtitle: \"Barrie describes his data...\"\ndate: \"2023-01-25\"\nauthor: \"Barrie D. Robison\"\nformat: html\ncode-fold: true\ncategories: [Tutorial, Resources, Quarto, Data Sets]\ndescription: \"Barrie attempts ASSIGMENT 2!  Will his glimpse of the Data Science Mythos drive him **MAD**?\"\nimage: Hasturcodes.png\n---\n\n\n# ASSIGNMENT 2: Your Data\n\nIn this assignment (detalied [here](../A2-YourData/index.qmd)), I will identify, import, describe, and host a data set that will be used throughout the remainder of the BCB 504 course for Data Visualizations.\n\n## MY DATASET\n\nI've chosen a subset of a large dataset produced by our evolutionary video game, [Project Hastur](https://store.steampowered.com/app/800700/Project_Hastur/). We built Project Hatur to be an evolutionary video game, and we are bold in our assertions of that fact. But we haven't really published any evidence that the evolutionary model works. This data set is the beginning of that exercise.\n\n::: callout-note\nPROJECT HASTUR creates a unique challenge by combining elements of 3D tower defense and real-time strategy with biological evolution. Fight against alien Proteans that evolve - using biologically accurate models of evolution - to overcome the player's defenses.\n\nEach creature you will face has its own unique genome controlling its abilities, behaviors, and appearance. Those that make it the furthest and do the most damage to your defenses have the most offspring you will have to defeat in the next generation. The result? Evolution responds to the player's strategy and makes every playthrough a unique experience.\n\nUse four upgradable turret classes, plus airstrikes and combat robots, to fight against the Protean invasion. Make strategic decisions about which turrets to build, when to upgrade them, and where to place them on the hex grid. A well-timed airstrike can change the flow of the game, but you'll have to wait before you can use it again. Unlock powerful upgrades for each turret class as you move across the Nyx system. As you play, the Proteans evolve new weapon resistances, behaviors, and movement capabilities to better destroy your defenses.\n\nIn CAMPAIGN MODE, battle through a series of maps as a military defense commander to protect the planet Nyx from the ever-evolving threat of the Proteans. Unlock weapons and upgrades and use them to fight against the Protean swarm and learn about the mysteries of Project Hastur.\n\nIn EXPERIMENT MODE, choose any map, tweak the parameters, and play infinitely to see what you can evolve. Change the number of creatures and the parameters of evolution, make your turrets invincible, or crank up the biomatter and experiment with the most powerful turret upgrades. Experiment mode lets you experience Project Hastur your way.\n:::\n\n### Data Collection\n\nThe data were collected by running Project Hastur in Experiment mode using two predefined conditions:\n\nThe CHIP SHREDDER towers when Fitness Functions were turned ON and Civilians were PRESENT.\n\nThe CHIP SHREDDER towers when Fitness Functions were turned OFF and Civilians were PRESENT.\n\nEach experimental condition was run 9 times (9 replicates).\n\n## IMPORTING THE DATA\n\nI'm going to use the `vroom` package to import multiple files. Each file is a replicate and the filename tells us about the experimental condition. Below I convert the filename variable (I named it `path`) into a a single categorical attribute called `Fit`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(vroom)\nlibrary(stringr)\nlibrary(tidyverse)\nlibrary(readxl)\nfiles <- fs::dir_ls(glob = \"*.csv\")\n\nHastur <- vroom(files, id = \"path\", \n                col_select = c(path, Generation, ID, Origin, AsexualReproduction, Fitness, Health,\n                               SightRange, Armor, Damage, WalkSpeed, RunSpeed, Acceleration, \n                               TurnRate, Attraction0, Attraction1, Attraction2))\n\nHastur$Fit <- str_split_i(Hastur$path, pattern = \"\", 1)\nHastur$replicate <- str_split_i(Hastur$path, pattern = \"\", 4)\n```\n:::\n\n\nThe `glimpse` command in the `Tidyverse` package is a nice way to summarize the data frame:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(Hastur)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 232,246\nColumns: 19\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: One or more parsing issues, call `problems()` on your data frame for details,\ne.g.:\n  dat <- vroom(...)\n  problems(dat)\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n$ path                <chr> \"HSC1.csv\", \"HSC1.csv\", \"HSC1.csv\", \"HSC1.csv\", \"H…\n$ Generation          <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,…\n$ ID                  <dbl> 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, …\n$ Origin              <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,…\n$ AsexualReproduction <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,…\n$ Fitness             <dbl> 66.85666, 63.94595, 57.76577, 66.73540, 66.69711, …\n$ Health              <dbl> 1018, 1041, 968, 991, 1020, 1016, 948, 1016, 1006,…\n$ SightRange          <dbl> 10.024340, 9.877473, 10.074020, 9.936288, 9.866014…\n$ Armor               <dbl> 0.04796165, 0.04707340, 0.04771014, 0.05201733, 0.…\n$ Damage              <dbl> 50, 51, 50, 50, 50, 50, 50, 49, 50, 50, 51, 49, 50…\n$ WalkSpeed           <dbl> 6.913904, 6.939496, 6.993181, 6.975009, 6.999002, …\n$ RunSpeed            <dbl> 19.94220, 19.76403, 20.08624, 19.93098, 20.00746, …\n$ Acceleration        <dbl> 14.77040, 14.63761, 15.32552, 15.03673, 14.80417, …\n$ TurnRate            <dbl> 360.6254, 357.9564, 365.7268, 361.3743, 356.8892, …\n$ Attraction0         <dbl> -0.01474968, -0.05083919, 0.16160530, -0.17245110,…\n$ Attraction1         <dbl> 0.109532600, -0.048011400, 0.035674940, 0.04642526…\n$ Attraction2         <dbl> 0.120717600, -0.121935400, 0.094071920, -0.0339948…\n$ Fit                 <chr> \"H\", \"H\", \"H\", \"H\", \"H\", \"H\", \"H\", \"H\", \"H\", \"H\", …\n$ replicate           <chr> \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", …\n```\n:::\n:::\n\n\n## DESCRIBE THE DATA\n\n### Data Set Type\n\nWhat we have here is a (big) **Flat Table**. The **Items** are the rows, and each row is an individual alien enemy that existed during one of the replicates. Each Item (alien) is described by **Attributes**, which are arranged in the columns.\n\n### Attribute Types\n\nThe `glimpse` we did in the preceding section gives us a hint as to what each attribute type might be. Let's flesh that out a bit though. I'm going to create a new data frame that describes the attributes.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nAttributes <- read_excel(\"Attributes.xlsx\")\nknitr::kable(Attributes)\n```\n\n::: {.cell-output-display}\n|Attribute           |Type         |Note                                                                  |\n|:-------------------|:------------|:---------------------------------------------------------------------|\n|path                |Categorical  |each File Name is a unique replicate                                  |\n|Generation          |Quantitative |Each Enemy Wave is a Generation                                       |\n|ID                  |Ordinal      |Each enemy has a unique ID within each replicate                      |\n|Origin              |Categorical  |The hive from which the enemy was spawned                             |\n|AsexualReproduction |Categorical  |Was the enemy spawned by infectiing a civilian?                       |\n|Fitness             |Quantitative |The value of Fitness is used to determine probability of reproduction |\n|Health              |Quantitative |Hit Points                                                            |\n|SightRange          |Quantitative |How far they can see civilians, towers, etc                           |\n|Armor               |Quantitative |resistance to physical damage                                         |\n|Damage              |Quantitative |how much damage they do to towers                                     |\n|WalkSpeed           |Quantitative |how fast they can walk                                                |\n|RunSpeed            |Quantitative |how fast they can run                                                 |\n|Acceleration        |Quantitative |how fast they can transition from walking to running                  |\n|TurnRate            |Quantitative |how fast they can turn                                                |\n|Attraction0         |Quantitative |negative values is attraction to civilians, positive is avoidance     |\n|Attraction1         |Quantitative |negative values is attraction to towers, positive is avoidance        |\n|Attraction2         |Quantitative |negative values is attraction to the base, positive is avoidance      |\n|Fit                 |Categorical  |Whether fitness functions were ON (I) or OFF (H)                      |\n:::\n:::\n\n\n## HOST THE DATA\n\nI'm publishing to GitHub! We will elaborate on this step as everyone progresses through the assignment.\n\n## TASK ABSTRACTION\n\nFor this data set, I am currently defining the user as ... me!  My hypothesis is that the two Fitness conditions create different evolutionary outcomes of the aliens in Project Hastur.  Some relevant ACTION TARGET pairs might be:\n\nDISCOVER TRENDS\n\nDISCOVER DISTRIBUTION\n\nDISCOVER SIMILARITY\n\nCOMPARE TRENDS\n\nCOMPARE DISTRIBUTION\n\nI'm going to try COMPARE TRENDS.  I want to COMPARE the TREND in `WalkSpeed` over time (`Generation`) between the two `Fit` categories.  To do this, I'll create a scatterplot, faceted by `Fit`.  I'm suspicious that `TurnRate` is involved somehow, so I'm coloring with that variable.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(Hastur, aes(x=Generation, y = WalkSpeed))+\n  geom_point(aes(color=TurnRate), alpha = 0.01, size = 1)+\n  scale_color_continuous(low=\"red\", high = \"blue\")+\n  facet_grid(replicate~Fit)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nHastur50 <- filter(Hastur, Generation == 49)\n  \n\nggplot(Hastur50, aes(x=TurnRate, y = WalkSpeed))+\n  geom_point(aes(color=Fit), alpha = 0.5, size = 1)+\n  \n  facet_grid(Fit~replicate)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}