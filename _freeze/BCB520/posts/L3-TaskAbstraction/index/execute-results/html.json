{
  "hash": "618504d9cb936eb42a22b98a5dd700e1",
  "result": {
    "markdown": "---\ntitle: \"LECTURE 3 - TASK ABSTRACTION\"\nformat:\n  revealjs: \n    slide-number: true\n    chalkboard: \n      buttons: false\n    preview-links: auto\n    css: styles.css\n    footer: <a href=\"https://canvas.uidaho.edu/courses/17806\" target=\"_blank\">CANVAS</a>...<a href=\"https://professorpolymorphic.github.io/RobisonWebSite/BCB520/BCB520.html\" target=\"_blank\">HOME</a>\n    theme: [default, custom.scss]\nauthor: \"Barrie Robison\"\ndate: \"2023-01-31\"\ncategories: [Lecture, DataViz, Task]\nimage: \"Nyarlathotep.png\"\ncode-fold: true\ndescription: \"Action - Target pairs ... of **eldritch horror**?\"\n---\n\n\n## LAST LECTURE\n\nComputer-based visualization systems provide visual representations of [datasets]{.red} designed to help people carry out tasks more effectively.\n\n![](whatexpanded.png){.absolute bottom=\"0\" right=\"0\" width=\"450\"}\n\n![](what.png){.absolute bottom=\"0\" height=\"400\"}\n\n## TASK ABSTRACTION\n\nComputer-based visualization systems provide visual representations of datasets designed to [help people carry out tasks]{.red} more effectively.\n\n![](Whybig.png){.absolute bottom=\"0\" right=\"0\" width=\"550\"}\n\n![](Why.png){.absolute bottom=\"70\" height=\"300\"}\n\n## FROM DOMAIN TO ABSTRACTION\n\n![](domaintoabstract.png)\n\n## KEY COMPONENTS OF TASK ABSTRACTION\n\n**{[action]{.red}, [target]{.blue}} pairs**\n\nComputer-based visualization systems provide visual representations of [datasets]{.blue} designed to help [people]{.red} carry out tasks more effectively.\n\n## ACTIONS AND TARGETS\n\n![](Whybig.png)\n\n## ACTIONS - Analyze\n::: columns\n::: {.r-fit-text .column width=\"60%\"}\n-   [Consume:]{.red} Information has already been generated and stored as data.\n\n    -   [Discover:]{.blue} new knowledge, test hypothesis, generate new hypothesis, verify\n    -   [Present:]{.blue} communicate something specific and already understood\n    -   [Enjoy:]{.blue} casual encounters with visualization\n\n-   [Produce:]{.red} generate new material or information\n\n    -   [Annotate:]{.blue} addition of graphical or text to existing visualization elements\n    -   [Record:]{.blue} saves or captures visualization elements as persistent artifacts (screenshots, lists, parameter sets, annotations)\n    -   [Derive:]{.blue} produce new data based on existing data (aka transform)\n\n:::\n\n::: {.column width=\"40%\"}\n![](Analyze.png)\n:::\n:::\n\n## ACTIONS - Search\n::: columns\n::: {.r-fit-text .column width=\"60%\"}\n-   [Lookup:]{.red} Location and target both known\n\n    -   Example: Look up humans in the Tree of Life, knowing they are mammals.\n\n\n-   [Locate:]{.red} Location unknown and target known\n\n    -   Example: Look up rabbits in the Tree of Life, not knowing they are lagomorphs.\n\n-   [Browse:]{.red} Location known and target unknown\n\n    -   Example: Find any clades within Mammalia that have only one species.\n\n\n-   [Explore:]{.red} Location unknown and target unknown\n\n    -   Example: Searching for anomalies in time series data.\n:::\n\n::: {.column width=\"40%\"}\n![](search.png)\n:::\n:::\n## ACTIONS - Query\n::: columns\n::: {.r-fit-text .column width=\"60%\"}\n-   [Query:]{.red} How much of the data matters to the task?\n\n    -   Identify: One (specific Item, individual, cell, etc)\n    -   Compare: Some (multiple targets)\n    -   Summarize: All (very common, aka Overview)\n\n\n\n:::\n\n::: {.column width=\"40%\"}\n![](query.png)\n:::\n:::\n\n## TARGETS - All Data\n\n![](Alldata.png)\n\n## TARGETS - Attributes\n\n![](Attributestarget.png)\n\n## TARGETS - Other Data\n\n![](networkspatial.png)\n\n## SUMMARY\n\nComputer-based visualization systems provide visual representations of datasets designed to [help people carry out tasks]{.red} more effectively.\n\n![](Whybig.png){.absolute bottom=\"0\" right=\"0\" width=\"550\"}\n\n## EXAMPLES! {.scrollable .smaller}\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\nlibrary(readxl)\nlibrary(vroom)\nlibrary(tidyverse)\nPerson <- read_excel(\"Tasks.xlsx\", sheet = \"Person\",\n    col_names = TRUE)\nAction <- read_excel(\"Tasks.xlsx\", sheet = \"Action\",\n    col_names = TRUE)\nTarget <- read_excel(\"Tasks.xlsx\", sheet = \"Target\",\n    col_names = TRUE)\n```\n:::\n\n\n:::: {.columns}\n\n::: {.column width=\"30%\"}\n\n\n|Person |\n|:------|\n|Barrie |\n|Jiyin  |\n|Ronald |\n|Cody   |\n|Eric   |\n\n\n:::\n\n::: {.column width=\"30%\"}\n\n\n|Action    |\n|:---------|\n|Discover  |\n|Present   |\n|Enjoy     |\n|Annotate  |\n|Record    |\n|Derive    |\n|Lookup    |\n|Browse    |\n|Locate    |\n|Explore   |\n|Identify  |\n|Compare   |\n|Summarize |\n\n\n:::\n\n::: {.column width=\"30%\"}\n\n\n|Target       |\n|:------------|\n|Trends       |\n|Outliers     |\n|Features     |\n|Distribution |\n|Extremes     |\n|Dependency   |\n|Correlation  |\n|Similarity   |\n|Topology     |\n|Paths        |\n|Shape        |\n\n\n:::\n\n::::\n\n\n## MANDATORY FUN {.scrollable .smaller}\n\n**We will do these until everyone has done at least one example.**\n\n[Ronald Summarize Features]{.fragment}\n\n\n[Barrie Summarize Features]{.fragment}\n\n\n[Ronald Record Dependency]{.fragment}\n\n\n[Eric Enjoy Extremes]{.fragment}\n\n\n[Eric Locate Outliers]{.fragment}\n\n\n[Cody Discover Extremes]{.fragment}\n\n\n[Cody Discover Shape]{.fragment}\n\n[Jiyin Locate Dependency]{.fragment}\n\n\n[Barrie Record Distribution]{.fragment}\n\n\n[Eric Discover Extremes]{.fragment}\n\n\n[Jiyin Identify Trends]{.fragment}\n\n\n[Cody Annotate Extremes]{.fragment}\n\n\n[Ronald Enjoy Distribution]{.fragment}\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    function fireSlideChanged(previousSlide, currentSlide) {\n\n      // dispatch for htmlwidgets\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for reveal\n    if (window.Reveal) {\n      window.Reveal.addEventListener(\"slidechanged\", function(event) {\n        fireSlideChanged(event.previousSlide, event.currentSlide);\n      });\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}