{
  "hash": "78c62f41e12da65b7ecacd013228b157",
  "result": {
    "markdown": "---\ntitle: TUTORIAL 3 - Python\ndate: '2023-01-19'\nformat:\n  html:\n    code-fold: true\ncategories:\n  - Tutorial\n  - Quarto\n  - Literate Programming\n  - Python\nimage: Pythonred.png\n---\n\n## IMPLEMENTING PYHTON IN QUARTO\n\nI relied heavily on the [Quarto documentation](https://quarto.org/docs/computations/python.html) for this tutorial.\n\nThe basic things I learned were:\n\n1. Install Python (again).  I downloaded the newest version from the [Python website](https://www.python.org/downloads/).\n2. Install the `jupyter' package using the terminal:\n  - Windows:  `py -m pip install jupyter`\n  - Mac:  `python3 -m pip install jupyter`\n3. Install the modules you need using the terminal (Mac examples below):\n  - `python3 -m pip install numpy`\n  - `python3 -m pip install matplotlib`\n  \nAfter I did this, the code from the Quarto website example (below) seemed to work!\n\n## QUARTO EXAMPLE CODE\n\nFor a demonstration of a line plot on a polar axis, see @fig-polar.\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nr = np.arange(0, 2, 0.01)\ntheta = 2 * np.pi * r\nfig, ax = plt.subplots(\n  subplot_kw = {'projection': 'polar'} \n)\nax.plot(theta, r)\nax.set_rticks([0.5, 1, 1.5, 2])\nax.grid(True)\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![A line plot on a polar axis](index_files/figure-html/fig-polar-output-1.png){#fig-polar width=450 height=439}\n:::\n:::\n\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {}
  }
}