---
title: "LECTURE 6 - Tabular Data"
format:
  revealjs: 
    slide-number: true
    chalkboard: 
      buttons: false
    preview-links: auto
    css: styles.css
    footer: <a href="https://canvas.uidaho.edu/courses/17806" target="_blank">CANVAS</a>...<a href="https://professorpolymorphic.github.io/RobisonWebSite/BCB520/BCB520.html" target="_blank">HOME</a>
    theme: [default, custom.scss]
author: "Barrie Robison"
date: "2023-02-28"
categories: [Lecture, DataViz, Data, Tables]
image: "Cthulhutabular.png"
code-fold: true
---


## THE THREE MAJOR DATA TYPES

::: r-stack
![](Tables.png){.fragment .absolute bottom="100" left="0" height="400"}

![](Networks.png){.fragment .absolute bottom="100" left="280" height="400"}

![](Spatial.png){.fragment .absolute bottom="75" left="520" height="390"}
:::

## WHAT?

Computer-based visualization systems provide visual representations of [datasets]{.red} designed to help people carry out tasks more effectively.

![](whatexpanded.png){.absolute bottom="0" right="0" width="450"}

![](what.png){.absolute bottom="0" height="400"}

## SEMANTICS FOR DATA {.smaller}

::: {layout-ncol="2"}
### Semantics

-   [item:]{.red} individual entity, discrete
    -   eg patient, car, stock, city
    -   "independent variable"
-   [attribute:]{.red} property that is measured, observed, logged...
    -   eg height, blood pressure for patient
    -   eg horsepower, make for car
    -   "dependent variable"

### Data Table

![](datatable2.png)
:::

[ITEM:]{.red} Person

[ATTRIBUTES:]{.red} Name, Age, Shirt Size, Favorite Fruit

## DATASET TYPES: TABLES

### Flat Table

::: columns
::: {.r-fit-text .column width="40%"}
-   One [ITEM]{.red} per row

    -   often called an **observation**

-   Each column is an [ATTRIBUTE]{.red}

    -   often called a **variable**

-   A cell holds the [VALUE]{.red} for an item/attribute pair

-   A unique [KEY]{.red} can be used (implicitly or explicitly) to identify each item even if they share all measured attributes
:::

::: {.column width="60%"}
![](flattable.png)
:::
:::

## FLAT TABLE EXAMPLE

::: {#fig-tables layout-ncol="2"}
![A dumb spreadsheet](spreadsheet.png)

![A cool spreadsheet](Cthulhuflat.png){width="380"}

Flat Tables
:::

## MULTIDIMENSIONAL TABLES

Indexing based on multiple [keys]{.red} (eg genes, patients)

::: {layout-ncol="2"}
![](multidimtable1.png)

![](multidimtable2.png)
:::

## KEYS AND VALUES {.smaller}

::: columns
::: {.column width="60%"}
[KEY:]{.red} an independent attribute used as unique index to look up items.

-   Simple tables: 1 key

-   Multidimensional tables: multiple keys

[Value:]{.red} a dependent attribute, value of cell

We will classify visualization idioms by the number of keys used.

0, 1, 2, ...
:::

::: {.column width="40%"}
![](numkeys.png)
:::
:::

## FRAMEWORK

![](tableencode.png)

## IDIOM: Scatterplot {.smaller}

**0 KEYS:** Only values are available or salient to the task.

::: columns
::: {.column width="60%"}
**Express values** (magnitudes) of quantitative attributes.

**Data:** 2 quantitative attributes

**Mark:** points

**Channels:** horizontal and verical position

**Tasks:** find trends, outliers, distribution, correlation, clusters

**Scalability:** hundreds of items
:::

::: {.column width="40%"}

```{r}
#| fig-cap: 
#|   - "Height and Weight of drafted NHL players."
#| fig-height: 5
#| fig-width: 4


library(tidyverse)
library(readxl)
library(rjson)
library(jsonlite)
library(ggplot2)
Bio<-fromJSON("draft.json")

noway<-as.data.frame(Bio)

players<- noway %>%
  select(data.draftYear, data.playerId, data.playerName, data.draftYear,
         data.roundNumber, data.overallPickNumber, data.pickInRound,
         data.height, data.weight, data.position)

ggplot(players, aes(x=data.height, y=data.weight))+
  geom_point()

```

:::
:::

## IDIOM: Scatterplot {.smaller}

**0 KEYS:** Only values are available or salient to the task.

::: columns
::: {.column width="60%"}
**Express values** (magnitudes) of quantitative attributes.

**Data:** 2 quantitative attributes

**Mark:** points

**Channels:** horizontal and verical position

**Tasks:** find trends, [outliers]{.red}, distribution, correlation, clusters

**Scalability:** hundreds of items
:::

::: {.column width="40%"}

```{r}
#| fig-cap: 
#|   - "Height and Weight of drafted NHL players."
#| fig-height: 5
#| fig-width: 4


ggplot(players, aes(x=data.height, y=data.weight))+
  geom_point()

```

:::
:::

## SCATTERPLOTS: More channels {.smaller}

**Additional channels are viable with scatterplots since we are using point marks.**

::: columns
::: {.column width="40%"}
**Examples:**

**Color:** But pay attention to Discriminability!

**Size:** But pay attention to using a quantitative attribute used to control 2D area. Directly encoding radius would mislead. Take the square root since area grows quadratically.

**Shape:**
:::

::: {.column width="60%"}

```{r}
#| fig-cap: "Height and Weight of drafted NHL goaltenders."
#| fig-height: 5
#| fig-width: 5

goalies<-players %>% filter(data.position=="G")
goalies$first<-"YES"
goalies$first[goalies$data.roundNumber>1]<-"NO"

ggplot(goalies, aes(x=data.height, y=data.weight))+
  geom_point(aes(color=first))
```

:::
:::

## SCATTERPLOT TASKS

Correlation

![](correl.png)

Clusters/groups, and clusters vs classes

![](clusters.png)

## KEYS: Categorical Regions {.smaller}

::: columns
::: {.column width="40%"}
-   Regions: contiguous bounded areas distinct from each other
    -   [NO OVERPLOTTING:]{.red} separate into spatial regions: one mark per region (for now)
-   use categorical or ordered attribute to separate into regions
    -   no conflict with expressiveness principle for categorical attributes
-   use ordered attribute to order and align regions
:::

::: {.column width="60%"}
![](somekeys.png)

![](sepordalign.png)
:::
:::

## Separated and aligned and ordered

Best case!

![](orderedbar.png)

## Separated/aligned - not ordered

Limitation: hard to know rank. what's 4th? what's 7th?

![](unorderedbar.png)

## Separated but not aligned or ordered

Limitation: hard to make comparisons with size (vs aligned position)

![](circles.png)

## IDIOM: Bar Chart {.smaller}

**One key, One value**

::: columns
::: {.column width="60%"}
**Data:** 1 categorical attribute, 1 quantitative attribute

**Mark:** Lines

**Channels:** Length to express quantitative value

**Spatial regions:** one per mark - separated horizontally, aligned vertically. Ordered by quantitative attribute: by label (alphabetical), by length attribute (data-driven)

**Tasks:** compare, lookup values

**Scalability:** dozens to hundreds of levels for key attribute (bars), hundreds for values.
:::

::: {.column width="40%"}
![](animalbar.png)
:::
:::

## IDIOM: Stacked Bar Chart {.smaller}

**Two keys, One value**

::: columns
::: {.column width="60%"}
**Data:** 2 categorical attribute, 1 quantitative attribute

**Mark:** vertical stack of line marks

**Glyph:** composite object, internal structure from multiple marks

**Channels:** length and color hue

**Spatial regions:** one per glyph

**Aligned:** full glyph, lowest bar component

**Unaligned:** other bar components

**Task:** part-to-whole relationship

**Scalability:** asymmetric for stacked key attrib, 10-12 levels segments for main key attrib, dozens to hundreds of levels bars
:::

::: {.column width="40%"}
![](stackedbar.png)
:::
:::

## IDIOM: Streamgraph {.smaller}

Generalized stacked graph emphasizing horizontal continuity vs vertical items [(example)](https://observablehq.com/@d3/streamgraph-transitions)

::: columns
::: {.column width="40%"}
**Data:** 1 categ key attrib (movies) 1 ordered key attrib (time) 1 quant value attrib (counts) derived data geometry: layers, where height encodes counts 1 quant attrib (layer ordering)

**Mark:** vertical stack of line marks

**Channels:** length and color hue

**Task:** part-to-whole relationship

**Scalability:** hundreds of time keys dozens to hundreds of movies keys more than stacked bars: most layers don't extend across whole chart
:::

::: {.column width="60%"}
![](stream.png)

![](stream2.png)
:::
:::

## IDIOM: Dot/Line Chart {.smaller}

**One key, One value**

::: columns
::: {.column width="60%"}
**Data:**2 quant attribs

**Mark:** points AND line connection marks between them

**Channels:** aligned lengths to express quant value separated and ordered by key attrib into horizontal regions

**Task:** find trend connection marks emphasize ordering of items along key axis by explicitly showing relationship between one item and the next

**Scalability:** hhundreds of key levels, hundreds of value levels
:::

::: {.column width="40%"}
![](dotline.png){height="500"}
:::
:::

## BAR vs LINE CHARTS {.smaller}

Choice depends on the type of key attributes.

Bar charts if categorical, Line charts if ordered. Do not use line charts for categorical key attributes as it violates the **expressiveness principle**. The implication of trend is so strong that it overrides semantics. "The more male a person is, the taller he/she is"

![](barsandlines.png)

## CHART AXES {.smaller}

::: columns
::: {.column width="30%"}
**Best practice to label axes**, with few exceptions. Individual small multiple views could share axis label.

**Include 0** at bottom left or the slope misleads. There are some exceptions (arbitrary 0, small change matters).

Truncating the Y-Axis: Threat or Menace? Correll, Bertini, & Franconeri, CHI 2020.
:::

::: {.column width="50%"}
![](axes1.png)
:::

::: {.column width="20%"}
![](axes2.png)
:::
:::

## IDIOM: Indexed Line Charts {.smaller}

::: columns
::: {.column width="40%"}
**Data:** 2 quant attribs 1 key + 1 value

**Derived data:** new quant value attrib index plot instead of original value

**Task:** show change over time

**Principle:** normalized, not absolute

**Scalability:** same as standard line chart
:::

::: {.column width="60%"}
![](indexedline.png)

[Cool Example](https://observablehq.com/@vega/vega-lite-interactive-index-chart)
:::
:::

## IDIOM: Gantt Charts {.smaller}

one key, two (related) values

::: columns
::: {.column width="40%"}
**Data:** 1 categ attrib, 2 quant attribs

**Mark:** line length: duration

**Channels:** horiz position: start time (+end from duration)

**Task:** mphasize temporal overlaps & start/end dependencies between items

**Scalability:** dozens of key levels bars hundreds of value levels durations
:::

::: {.column width="60%"}
![](gantt.png)
:::
:::

## IDIOM: Slopegraphs {.smaller}

two values

::: columns
::: {.column width="40%"}
**Data:** 2 quant value attribs (1 derived attrib: change magnitude)

**Mark:** point + line line connecting mark between pts

**Channels:** 2 vertical pos: express attrib value (linewidth/size, color)

**Task:** emphasize changes in rank/value

**Scalability:** hundreds of value levels dozens of item
:::

::: {.column width="60%"}
![](slopegraph.png)
:::
:::

## 2 KEYS

## IDIOM: Heatmap {.smaller}

two keys, one value

::: columns
::: {.column width="40%"}
**Data:** 2 categ attribs (gene, experimental condition) 1 quant attrib (expression levels)

**Mark:** point separate and align in 2D matrix indexed by 2 categorical attributes

**Channels:** color by quant attrib (ordered diverging colormap)

**Task:** find clusters, outliers

**Scalability:** 1M items, 100s of categ levels, \~10 quant attrib levels
:::

::: {.column width="60%"}
![](heatmapbad.png)
:::
:::

## HEATMAP REORDERING

![](heatmaporder.png)

## CLUSTERED HEATMAP {.smaller}

[Use derived data:]{.red} compute 2 cluster hierarchies and represent as a dendrogram. Parent-child relationships represented in tree with connection line marks, leaves aligned so interior branch heights are easy to compare. Heatmap marks are (re-)ordered by cluster hierarchy traversal. **Task:** assess quality of clusters found by automatic methods

![](heatmapcluster.png)

## AXIS ORIENTATION

![](axisorient.png)

## DISCUSS

![](nightengale.png)

## RADIAL BAR CHART {.smaller}

::::{.columns}
:::{.column}

![](radial.png)

:::

:::{.column}

[Star plot:]{.red} line mark, radial axes meet at central point

[Radial bar chart:]{.red} line mark, radial axes meet at central ring 

**Channels:** length, angle/orientation 

[Bar chart:]{.blue} rectilinear axes, aligned vertically

**Accuracy:** length not aligned with radial layouts, making them less accurately perceived than rectilinear aligned layouts.

[Vismon: Facilitating Risk Assessment and Decision Making In Fisheries Management. Booshehrian, Möller, Peterman, and Munzner. Technical Report TR 2011-04, Simon Fraser University, School of Computing Science, 2011.]{.caption}

:::
::::

## RADAR PLOT

Radial line chart with point marks, radial layout, and connecting line marks. [Avoid unless data are cyclic.]{.red}



![](radar.png)

## RADAR PLOT EXAMPLE

![](radarexample.png)

[TheFunctionalArt](http://www.thefunctionalart.com/2012/11/radar-graphs-avoid-them-999-of-time.html)

## PIE AND COXCOMB CHARTS {.smaller}

1 categorical key attribute, 1 quantitative value attribute

::::{.columns}
:::{.column}

[Pie chart:]{.red} **interlocking area** marks with angle channel causes [variation in 2D area]{.blue}. Keys are separated & ordered radially with [uniform height]{.blue}. accuracy: area less accurate than rectilinear aligned line length.

**Task:** part-to-whole judgements.

[Coxcomb chart:]{.red} line marks with length channel, creating [variation in only 1D length]{.blue}.  Keys are separated & ordered radially with [uniform width]{.blue}. These charts are a direct analog to radial bar charts. 

:::

:::{.column}

![](piecox.png){height="500" right="0"}

:::
::::


## NIGHTENGALE ROSE

**Coxcomb / Nightengale Rose/ Polar Area Chart** Invented by Florence Nightingale. 

![](nightengale.png)

## COXCOMB: Perception {.smaller}

::::{.columns}
:::{.column}

**Encode:** 1D length

**Decode/perceive:** 2D area

The nonuniform relationship between line/sector width and mark length causes area variation to scale nonlinearly with line mark length!

**A standard bar chart is safer:** bars are uniform width, so area is linear with line mark length in both radial & rectilinear cases.
:::

:::{.column}


![](coxperc.png)

:::
::::

## PIE CHARTS: Perception

::::{.columns}
:::{.column}

Some empirical evidence that people respond to arc length.

**Decode/perceive:** arc length, maybe also areas, but not angles.

Donut charts are no worse than pie charts.



:::

:::{.column}

![](pieperc.png)

:::
::::

[Arcs, Angles, or Areas: Individual Data Encodings in Pie and Donut Charts. Skau and Kosara. Proc. EuroVis 2016]{.caption}

[Explore this concept](https://eagereyes.org/blog/2016/an-illustrated-tour-of-the-pie-chart-study-results)

## PIE CHARTS: Best Practices

Not so bad for two (or few) levels and part-to-whole tasks. Dubious for several levels if details matter. Terrible for many levels.

![](piebest.png)

## NORMALIZED STACKED BAR {.smaller}

::::{.columns}
:::{.column}

**Task:** part-to-whole judgements

**Normalized stacked bar chart:** stacked bar chart, normalized to full vertical height. A single stacked bar is equivalent to a full pie chart. 

High information density can be achieved with narrow rectangles. Pie chart information density is much more limited and requires a large circle.

:::

:::{.column}

![](normstack.png){height="500"}

:::
::::

## GLYPHMAPS

[Rectilinear glyphs]{.red} are good for linear vs nonlinear trends. [Radial glyphs]{.red} are good for cyclic patterns and evaluating periodicity.

![](glyphmap.png)

[Glyph-maps for Visually Exploring Temporal Patterns in Climate Data and Models. Wickham, Hofmann, Wickham, and Cook. Environmetrics 23:5 (2012), 382--393.]{.caption}



## PARALLEL AXES

![](rectparralell.png)

## SPLOM

::::{.columns}
:::{.column}

[Scatterplot matrix (SPLOM):]{.red} Rectilinear axes with point mark. All possible pairs of axes are visualized.

**Scalability:** about a dozen attributes and dozens to hundreds of items.
:::

:::{.column}


![](splom.png)

:::
::::

## PARALLEL COORDINATES {.smaller}

**Scatterplot limitation:** visual representation with orthogonal axes can show only two attributes with spatial position channel.

![](splomtable.png)

## PARALLEL COORDINATES {.smaller}

::::{.columns}
:::{.column}

**Alternative:** Line up axes in parallel to show many attributes with position. Items are encoded with a line with `n` segments (`n` is the number of attributes shown). Ordering is a major challenge.

**Scalability:** dozens of attributes and hundreds of items.

:::

:::{.column}


![](parcoord.png)

:::
::::

## PARALLEL COORDINATES: Limitations {.smaller}

Patterns only visible between neighboring axis pairs. How to pick axis order? The usual solution is reorderable axes and interactive exploration.  The downside of interaction is human-powered search. 

![](parcoordcars.png)

As usual, [OBSERVABLE](https://observablehq.com/@d3/parallel-coordinates) really shines for these types of interactive plots!


## ORIENTATION LIMITATIONS {.smaller}

::::{.columns}
:::{.column}

**Rectilinear:** Scalability is limited with regard to the number of axes. (2 axes best, 3 problematic, 4+ impossible.)

**Parallel:** Unfamiliarity and training time.

**Radial:** Perceptual limits include polar coordinate asymmetry, lower precision with angle channles compated to length channels, nonuniform sector width/size depending on radial distance.  While thes limits are frequently problematic, they can sometimes be deliberately exploited. (Example: for 2 attribs of very unequal importance)
:::

:::{.column}

![](orientlim.png)

:::
::::

Uncovering Strengths and Weaknesses of Radial Visualizations - an Empirical Approach. Diehl, Beck and Burch. IEEE TVCG (Proc. InfoVis) 16(6):935--942, 2010.

## CHART AXES {.smaller}

::::{.columns}
:::{.column}

Labelled axes are critical! Avoid cropping the y-axis (include 0 at bottom left) or the slope misleads the viewer.

:::

:::{.column}

![](plannedparent.png)

:::
::::

http://www.thefunctionalart.com/2015/10/if-you-see-bullshit-say-bullshit.html

## DUAL AXIS LINE CHARTS {.smaller}

This approach is controversial. Dual axes are acceptable if they are commensurate, but beware, as they make it very easy to mislead!

![](dualaxis.png)

## CONNECTED SCATTERPLOTS {.smaller}

Scatterplot with line connection marks. These are popular in journalism.

::::{.columns}
:::{.column}

**Horiz + vert axes:** value attributes 

**Line connection marks:** temporal order 

Alternative to dual-axis charts (horiz: time vert: two value attributes). 

empirical study suggests these are engaging, but correlations are unclear.

:::

:::{.column}

![](connscatter.png)

:::
::::

[http://steveharoz.com/research/connected_scatterplot/]{.caption}

## BREAKING CONVENTIONS

The inverted y axis is evocative of blood dripping down on Poe.

![](poe.png)

[https://public.tableau.com/profile/ben.jones#!/vizhome/EdgarAllanPoeViz/EdgarAllanPoeViz]{.caption}

## ARRANGING TABULAR DATA {.smaller}

What did we miss?

https://github.com/rstudio/cheatsheets/blob/main/data-visualization.pdf

