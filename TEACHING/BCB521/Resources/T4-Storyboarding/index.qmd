---
title: "Starfield Data Science"
code-fold: true
---

Here is a link to the [animated version](AnimatedManufacture.qmd)!


```{r}
library(tidyverse)
library(readxl)
library(jsonlite)



AidMake<- read_excel("Starfield.xlsx", sheet = "Organics")
Resources <- read_excel("Starfield.xlsx", sheet = "Resource")
Outpost <- read_excel("Starfield.xlsx", sheet = "Outpost")
Aid <- read_excel("Starfield.xlsx", sheet = "Aid")
AidMaster <- read_excel("Starfield.xlsx", sheet = "AidMaster")
```

```{r}
Organic <- Resources %>%
  filter(Type == "Organic")

Inorganic <- Resources %>%
  filter(Type == "Inorganic")

Manufactured <- Resources %>%
  filter(Type == "Manufactured")

AidFarm <- AidMake %>%
  filter(Type == "Aid")

AidCraft <- AidMaster %>%
  filter(FULLCRAFT == "Y" & TYPE != "Food" & TYPE != "Drink")%>%
  select(c("RECIPE", "TYPE", "INGREDIENT1", "INGREDIENT2", "INGREDIENT3"))

Extractors <- Outpost %>%
  filter(Type == "Extractors")

Structures <- Outpost %>%
  filter(Type == "Structures")

Power <- Outpost %>%
  filter(Type == "Power")
```


```{r}



# Convert to long format
long_data <- AidCraft %>% 
  gather(key = "ingredient_number", value = "ingredient", INGREDIENT1:INGREDIENT3) %>%
  select(-ingredient_number) %>%
  filter(!is.na(ingredient))

energy <- long_data %>%
  mutate(value = 1)%>%
  mutate(source = ingredient)%>%
  mutate(target = RECIPE)%>%
  select(c("source", "target", "value"))

write.csv(energy, file = "energy.csv")

```
## OUTPOST SANKEY DIAGRAM

```{r}

ManRecipe <- read_excel("BarrieCraft.xlsx", sheet = 1)


  
long_Man <- ManRecipe %>%
  select(Resource, INGREDIENT1:INGREDIENT7) %>%
  pivot_longer(cols = INGREDIENT1:INGREDIENT7, 
               names_to = "ingredient_number", 
               values_to = "ingredient") %>%
  select(-ingredient_number) %>%
  filter(!is.na(ingredient)) %>%
  mutate(
    amount = as.numeric(str_extract(ingredient, "\\b\\d+\\.?\\d*\\b")), 
    unit_description = str_extract(ingredient, "[a-zA-Z]+(?:\\s+[a-zA-Z]+)*"))  %>%
  mutate(
    unit_description = str_to_title(unit_description)
  )

manufacturing <- long_Man%>%
  mutate(value = amount)%>%
  mutate(source = unit_description)%>%
  mutate(target = Resource)%>%
  select(c("source", "target", "value"))%>%
  arrange(source)

write.csv(manufacturing, file = "manufacturing.csv")

```


```{r}
Outposts <- read_excel("BarrieCraft.xlsx", sheet = 3)


  
long_Out <- Outposts %>%
  select(Outpost, INGREDIENT1:INGREDIENT7) %>%
  pivot_longer(cols = INGREDIENT1:INGREDIENT7, 
               names_to = "ingredient_number", 
               values_to = "ingredient") %>%
  select(-ingredient_number) %>%
  filter(!is.na(ingredient)) %>%
  mutate(
    amount = as.numeric(str_extract(ingredient, "\\b\\d+\\.?\\d*\\b")), 
    unit_description = str_extract(ingredient, "[a-zA-Z]+(?:\\s+[a-zA-Z]+)*"))  %>%
  mutate(
    unit_description = str_to_title(unit_description)
  )

production <- long_Out%>%
  mutate(value = amount)%>%
  mutate(target = unit_description)%>%
  mutate(source = Outpost)%>%
  select(c("source", "target", "value"))%>%
  arrange(source)

write.csv(production, file = "production.csv")

prodman <- rbind(manufacturing, production)

write.csv(prodman, file = "prodman.csv")
```

```{r}
# Read the CSV file
data <- prodman

# Create a vector of unique node names
nodes <- data %>% 
  select(source, target) %>% 
  unlist() %>% 
  unique() %>% 
  sort()

# Make a data frame
nodes_df <- tibble(name = nodes)

# Create links with source and target indices and values
links <- data %>%
  transmute(source = match(source, nodes) - 1,
            target = match(target, nodes) - 1,
            value = value)

# Create the JSON structure
sankey_data <- list(nodes = nodes_df, links = links)

# Save to a JSON file
write_json(sankey_data, "sankey.json", pretty = TRUE)

```


```{r}


# Read the links CSV file
links_data <- manufacturing

# Read the categories DataFrame (modify this according to your actual data source)
categories_data <- Resources %>%
  select(Resource, Type)

# Function to get categories
get_categories <- function(node_names) {
  categories_data %>%
    filter(Resource %in% node_names) %>%
    transmute(name = Resource, category = Type)
}

# Get unique node names
nodes_names <- links_data %>%
  select(source, target) %>%
  unlist() %>%
  unique()

# Get categories for nodes
nodes <- get_categories(nodes_names)

# Create links with source and target indices and values
links <- links_data %>%
  transmute(source = match(source, nodes$name) - 1,
            target = match(target, nodes$name) - 1,
            value = value)

# Create the JSON structure
sankey_data2 <- list(nodes = nodes, links = links)

# Save to a JSON file
write_json(sankey_data2, "sankey2.json", pretty = TRUE)



```


```{ojs}

d3 = require("d3@7", "d3-sankey@0.12")

data = {
  const links = await FileAttachment("prodman.csv").csv({typed: true});
  const nodes = Array.from(new Set(links.flatMap(l => [l.source, l.target])), name => ({name, category: name.replace(/ .*/, "")}));
  return {nodes, links};
}
```

```{ojs}
viewof nodeAlign = Inputs.select(new Map([["left", "sankeyLeft"], ["right", "sankeyRight"], ["center", "sankeyCenter"], ["justify", "sankeyJustify"]]), {
  value: "sankeyJustify",
  label: "Node alignment"
})


```

```{ojs}
viewof linkColor = Inputs.select(new Map([
  ["static", "#aaa"],
  ["source-target", "source-target"],
  ["source", "source"],
  ["target", "target"],
]), {
  value: new URLSearchParams(html`<a href>`.search).get("color") || "source-target",
  label: "Link color"
})

```


```{ojs}
chart = {
  // Specify the dimensions of the chart.
  const width = 928;
  const height = 800;
  const format = d3.format(",.0f");

  // Create a SVG container.
  const svg = d3.create("svg")
      .attr("width", width)
      .attr("height", height)
      .attr("viewBox", [0, 0, width, height])
      .attr("style", "max-width: 100%; height: auto; font: 10px sans-serif;");

  // Constructs and configures a Sankey generator.
  const sankey = d3.sankey()
      .nodeId(d => d.name)
      .nodeAlign(d3[nodeAlign]) // d3.sankeyLeft, etc.
      .nodeWidth(15)
      .nodePadding(10)
      .extent([[1, 5], [width - 1, height - 5]]);

  // Applies it to the data. We make a copy of the nodes and links objects
  // so as to avoid mutating the original.
  const {nodes, links} = sankey({
    nodes: data.nodes.map(d => Object.assign({}, d)),
    links: data.links.map(d => Object.assign({}, d))
  });

  // Defines a color scale.
  const color = d3.scaleOrdinal(d3.schemeCategory10);

  // Creates the rects that represent the nodes.
  const rect = svg.append("g")
      .attr("stroke", "#000")
    .selectAll()
    .data(nodes)
    .join("rect")
      .attr("x", d => d.x0)
      .attr("y", d => d.y0)
      .attr("height", d => d.y1 - d.y0)
      .attr("width", d => d.x1 - d.x0)
      .attr("fill", d => color(d.category));

  // Adds a title on the nodes.
  rect.append("title")
      .text(d => `${d.name}\n${format(d.value)} TWh`);

  // Creates the paths that represent the links.
  const link = svg.append("g")
      .attr("fill", "none")
      .attr("stroke-opacity", 0.5)
    .selectAll()
    .data(links)
    .join("g")
      .style("mix-blend-mode", "multiply");

  // Creates a gradient, if necessary, for the source-target color option.
  if (linkColor === "source-target") {
    const gradient = link.append("linearGradient")
        .attr("id", d => (d.uid = DOM.uid("link")).id)
        .attr("gradientUnits", "userSpaceOnUse")
        .attr("x1", d => d.source.x1)
        .attr("x2", d => d.target.x0);
    gradient.append("stop")
        .attr("offset", "0%")
        .attr("stop-color", d => color(d.source.category));
    gradient.append("stop")
        .attr("offset", "100%")
        .attr("stop-color", d => color(d.target.category));
  }

  link.append("path")
      .attr("d", d3.sankeyLinkHorizontal())
      .attr("stroke", linkColor === "source-target" ? (d) => d.uid
          : linkColor === "source" ? (d) => color(d.source.category)
          : linkColor === "target" ? (d) => color(d.target.category) 
          : linkColor)
      .attr("stroke-width", d => Math.max(1, d.width));

  link.append("title")
      .text(d => `${d.source.name} â†’ ${d.target.name}\n${format(d.value)} TWh`);

  // Adds labels on the nodes.
  svg.append("g")
    .selectAll()
    .data(nodes)
    .join("text")
      .attr("x", d => d.x0 < width / 2 ? d.x1 + 6 : d.x0 - 6)
      .attr("y", d => (d.y1 + d.y0) / 2)
      .attr("dy", "0.35em")
      .attr("text-anchor", d => d.x0 < width / 2 ? "start" : "end")
      .text(d => d.name);

  return svg.node();
}

```
